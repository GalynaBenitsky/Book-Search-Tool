{"ast":null,"code":"import _regeneratorRuntime from\"/Users/xx/Desktop/book_search_tool/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/xx/Desktop/book_search_tool/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{stringify}from\"query-string\";var BASE_URL=\"http://openlibrary.org\";var get=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(uri,params){var url,response;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:url=\"\".concat(BASE_URL).concat(uri,\"?\").concat(stringify(params));_context.next=3;return fetch(url,{cache:\"no-cache\",headers:{Accept:\"application/json\"}});case 3:response=_context.sent;_context.next=6;return response.json();case 6:return _context.abrupt(\"return\",_context.sent);case 7:case\"end\":return _context.stop();}}},_callee);}));return function get(_x,_x2){return _ref.apply(this,arguments);};}();export var openLibrary=function openLibrary(title){return get(\"/search.json\",{title:title});};","map":{"version":3,"sources":["/Users/xx/Desktop/book_search_tool/src/apias/openLibrary.js"],"names":["stringify","BASE_URL","get","uri","params","url","fetch","cache","headers","Accept","response","json","openLibrary","title"],"mappings":"+SAAA,OAASA,SAAT,KAA0B,cAA1B,CAEA,GAAMC,CAAAA,QAAQ,CAAG,wBAAjB,CAEA,GAAMC,CAAAA,GAAG,0FAAG,iBAAOC,GAAP,CAAYC,MAAZ,mIACJC,GADI,WACKJ,QADL,SACgBE,GADhB,aACuBH,SAAS,CAACI,MAAD,CADhC,wBAGaE,CAAAA,KAAK,CAACD,GAAD,CAAM,CAChCE,KAAK,CAAE,UADyB,CAEhCC,OAAO,CAAE,CACPC,MAAM,CAAE,kBADD,CAFuB,CAAN,CAHlB,QAGJC,QAHI,qCAUGA,CAAAA,QAAQ,CAACC,IAAT,EAVH,6GAAH,kBAAHT,CAAAA,GAAG,gDAAT,CAaA,MAAO,IAAMU,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,KAAD,QAAWX,CAAAA,GAAG,CAAC,cAAD,CAAiB,CAAEW,KAAK,CAALA,KAAF,CAAjB,CAAd,EAApB","sourcesContent":["import { stringify } from \"query-string\";\n\nconst BASE_URL = \"http://openlibrary.org\";\n\nconst get = async (uri, params) => {\n  const url = `${BASE_URL}${uri}?${stringify(params)}`;\n\n  const response = await fetch(url, {\n    cache: \"no-cache\",\n    headers: {\n      Accept: \"application/json\",\n    },\n  });\n\n  return await response.json();\n};\n\nexport const openLibrary = (title) => get(\"/search.json\", { title });\n"]},"metadata":{},"sourceType":"module"}